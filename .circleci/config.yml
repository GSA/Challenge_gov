version: 2.1

orbs:
  cloudfoundry: circleci/cloudfoundry@0.1.73
  browser-tools: circleci/browser-tools@1.1.3

jobs:
  setup:
    parallelism: 1
    docker:
      - image: circleci/elixir:1.9.4-node
        environment:
          MIX_ENV: test
    steps:
      - checkout
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - run: cp config/test.circleci.exs config/test.local.exs
      - restore_cache:
          keys:
            - v4-yarn-cache-{{ .Branch }}-{{ checksum "assets/yarn.lock" }}
            - v4-yarn-cache-{{ .Branch }}
            - v4-yarn-cache
      - restore_cache:
          keys:
            - v3-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
            - v3-mix-cache-{{ .Branch }}
            - v3-mix-cache
      - restore_cache:
          keys:
            - v3-build-cache-{{ .Branch }}
            - v3-build-cache
      - run: mix do deps.get, compile
      - run: cd assets && yarn && cd ..
      - save_cache:
          key: v4-yarn-cache-{{ .Branch }}-{{ checksum "assets/yarn.lock" }}
          paths: "assets/node_modules"
      - save_cache:
          key: v4-yarn-cache-{{ .Branch }}
          paths: "assets/node_modules"
      - save_cache:
          key: v4-yarn-cache-{{ .Branch }}
          paths: "assets/node_modules"
      - save_cache:
          key: v3-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths: "deps"
      - save_cache:
          key: v3-mix-cache-{{ .Branch }}
          paths: "deps"
      - save_cache:
          key: v3-mix-cache
          paths: "deps"
      - save_cache:
          key: v3-build-cache-{{ .Branch }}
          paths: "_build"
      - save_cache:
          key: v3-build-cache
          paths: "_build"

  lint:
    parallelism: 1
    docker:
      - image: circleci/elixir:1.9.4-node
        environment:
          MIX_ENV: test
    steps:
      - checkout
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - run: cp config/test.circleci.exs config/test.local.exs
      - restore_cache:
          key: v4-yarn-cache-{{ .Branch }}-{{ checksum "assets/yarn.lock" }}
      - restore_cache:
          key: v3-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
      - restore_cache:
          key: v3-build-cache-{{ .Branch }}
      - run: mix deps.get
      - run: mix compile --force
      - run: mix deps.audit  --ignore-package-names sweet_xml
      - run: mix format --check-formatted
      - run: mix credo --all --format=oneline

  test:
    parallelism: 1
    docker:
      - image: circleci/elixir:1.9.4-node
        environment:
          MIX_ENV: test
      - image: mdillon/postgis:10
        environment:
          POSTGRES_DB: challenge_gov_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
    steps:
      - checkout
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - run: mix clean
      - run: cp config/test.circleci.exs config/test.local.exs
      - restore_cache:
          key: v4-yarn-cache-{{ .Branch }}-{{ checksum "assets/yarn.lock" }}
      - restore_cache:
          key: v3-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
      - restore_cache:
          key: v3-build-cache-{{ .Branch }}
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: mix deps.get
      - run: mix compile --force
      - run: mix ecto.migrate
      - run: mix run priv/repo/seeds.exs
      - run: cd assets && yarn build && cd ..
      - run: mix test
      - store_artifacts:
          path: screenshots

  assets:
    parallelism: 1
    docker:
      - image: circleci/elixir:1.9.4-node
        environment:
          MIX_ENV: test
    steps:
      - checkout
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - run: cp config/test.circleci.exs config/test.local.exs
      - restore_cache:
          key: v4-yarn-cache-{{ .Branch }}-{{ checksum "assets/yarn.lock" }}
      - restore_cache:
          key: v3-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
      - restore_cache:
          key: v3-build-cache-{{ .Branch }}
      - run: cd assets && yarn run build && cd ..
      - run: mix deps.get
      - run: mix phx.digest
      - persist_to_workspace:
          root: ~/project
          paths: priv/static

  dev-deploy:
    parallelism: 1
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run: echo -e $DEV_PRIVATE_KEY > dev_key.pem
      - run: echo -e $DEV_PUBLIC_CERT > dev_cert.pem
      - run: echo 'export CF_PASSWORD=$CF_PASSWORD_DEV' >> $BASH_ENV
      - run: echo 'export CF_USERNAME=$CF_USERNAME_DEV' >> $BASH_ENV
      - cloudfoundry/install:
          endpoint: 'https://api.fr.cloud.gov'
          org: gsa-tts-innovation-challenge
          space: dev
      - run: cf push challenge-portal-dev

  staging-deploy:
    parallelism: 1
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run: echo -e $STAGING_PRIVATE_KEY > staging_key.pem
      - run: echo -e $STAGING_PUBLIC_CERT > staging_cert.pem
      - run: echo 'export CF_PASSWORD=$CF_PASSWORD_STAGING' >> $BASH_ENV
      - run: echo 'export CF_USERNAME=$CF_USERNAME_STAGING' >> $BASH_ENV
      - cloudfoundry/install:
          endpoint: 'https://api.fr.cloud.gov'
          org: gsa-tts-innovation-challenge
          space: staging
      - run: cf push challenge-portal-staging

workflows:
  test-and-deploy:
    jobs:
      - setup
      - lint:
          requires:
            - setup
      - test:
          requires:
            - setup
      - assets:
          requires:
            - setup
      - dev-deploy:
          requires:
            - lint
            - test
            - assets
          filters:
            branches:
              only: main
      - release-approval:
          type: approval
          requires:
            - assets
          filters:
            branches:
              only: staging
      - staging-deploy:
          requires:
            - release-approval
          filters:
            branches:
              only: staging
