version: 2.1

orbs:
  cloudfoundry: circleci/cloudfoundry@1.0
  browser-tools: circleci/browser-tools@1.4.8

jobs:
  setup:
    parallelism: 1
    docker:
      - image: cimg/elixir:1.16.3-erlang-26.2.1-node
        environment:
          MIX_ENV: test
    steps:
      - checkout
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - run: cp config/test.circleci.exs config/test.local.exs
      - restore_cache:
          keys:
            - v5-yarn-cache-{{ .Branch }}-{{ checksum "assets/yarn.lock" }}
            - v5-yarn-cache-{{ .Branch }}
            - v5-yarn-cache
      - restore_cache:
          keys:
            - v5-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
            - v5-mix-cache-{{ .Branch }}
      - restore_cache:
          keys:
            - v5-build-cache-{{ .Branch }}
      - run: mix do deps.get, compile
      - run: cd assets && yarn && cd ..
      - save_cache:
          key: v5-yarn-cache-{{ .Branch }}-{{ checksum "assets/yarn.lock" }}
          paths: "assets/node_modules"
      - save_cache:
          key: v5-yarn-cache-{{ .Branch }}
          paths: "assets/node_modules"
      - save_cache:
          key: v5-yarn-cache-{{ .Branch }}
          paths: "assets/node_modules"
      - save_cache:
          key: v5-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths: "deps"
      - save_cache:
          key: v5-mix-cache-{{ .Branch }}
          paths: "deps"
      - save_cache:
          key: v5-build-cache-{{ .Branch }}
          paths: "_build"

  lint:
    parallelism: 1
    docker:
      - image: cimg/elixir:1.16.3-erlang-26.2.1-node
        environment:
          MIX_ENV: test
    steps:
      - checkout
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - run: cp config/test.circleci.exs config/test.local.exs
      - restore_cache:
          key: v5-yarn-cache-{{ .Branch }}-{{ checksum "assets/yarn.lock" }}
      - restore_cache:
          key: v5-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
      - restore_cache:
          key: v5-build-cache-{{ .Branch }}
      - run: mix deps.get
      - run: mix compile --force
      - run: mix deps.audit  --ignore-package-names sweet_xml
      - run: mix format --check-formatted
      - run: mix credo --all --format=oneline

  test:
    parallelism: 1
    docker:
      - image: cimg/elixir:1.16.3-erlang-26.2.1-node
        environment:
          MIX_ENV: test
      - image: mdillon/postgis:10
        environment:
          POSTGRES_DB: challenge_gov_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
    steps:
      - checkout
      - run: sudo apt-get update
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          command: |
            google-chrome --version
            chromedriver --version
          name: Check install
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - run: mix clean
      - run: cp config/test.circleci.exs config/test.local.exs
      - restore_cache:
          key: v5-yarn-cache-{{ .Branch }}-{{ checksum "assets/yarn.lock" }}
      - restore_cache:
          key: v5-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
      - restore_cache:
          key: v5-build-cache-{{ .Branch }}
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: mix deps.get
      - run: mix compile --force
      - run: mix ecto.migrate
      - run: mix run priv/repo/seeds.exs
      - run: cd assets && yarn build && cd ..
      - run: mix test
      - store_artifacts:
          path: screenshots

  assets:
    parallelism: 1
    docker:
      - image: cimg/elixir:1.16.3-erlang-26.2.1-node
        environment:
          MIX_ENV: test
    steps:
      - checkout
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - run: cp config/test.circleci.exs config/test.local.exs
      - restore_cache:
          key: v5-yarn-cache-{{ .Branch }}-{{ checksum "assets/yarn.lock" }}
      - restore_cache:
          key: v5-mix-cache-{{ .Branch }}-{{ checksum "mix.lock" }}
      - restore_cache:
          key: v5-build-cache-{{ .Branch }}
      - run: mix deps.get
      - run: cd assets && yarn run build && cd ..
      - run: mix phx.digest
      - persist_to_workspace:
          root: ~/project
          paths: priv/static

  dev-deploy:
    parallelism: 1
    docker:
      - image: cimg/node:20.14.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run: echo -e $DEV_PRIVATE_KEY > dev_key.pem
      - run: echo -e $DEV_PUBLIC_CERT > dev_cert.pem
      - run: echo 'export CF_PASSWORD=$CF_PASSWORD_DEV' >> $BASH_ENV
      - run: echo 'export CF_USERNAME=$CF_USERNAME_DEV' >> $BASH_ENV
      - run:
          name: Install Cloud Foundry CLI
          command: |
            sudo apt-get update
            sudo apt-get install -y ca-certificates jq
            sudo touch /etc/apt/sources.list.d/cloudfoundry-cli.list
            echo "deb [trusted=yes] https://packages.cloudfoundry.org/debian stable main" | sudo tee -a /etc/apt/sources.list.d/cloudfoundry-cli.list
            sudo apt-get update
            sudo apt-get install dpkg
            sudo apt-get install cf7-cli
      - cloudfoundry/auth:
          endpoint: "https://api.fr.cloud.gov"
          org: gsa-tts-innovation-challenge
          space: dev
      - run: cf push challenge-portal-dev --strategy rolling

  dev-eval-deploy:
    parallelism: 1
    docker:
      - image: cimg/node:20.14.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run: echo -e $EVAL_DEV_PRIVATE_KEY > dev_key.pem
      - run: echo -e $EVAL_DEV_PUBLIC_CERT > dev_cert.pem
      - run: echo 'export CF_PASSWORD=$CF_PASSWORD_EVAL_DEV' >> $BASH_ENV
      - run: echo 'export CF_USERNAME=$CF_USERNAME_EVAL_DEV' >> $BASH_ENV
      - run:
          name: Install Cloud Foundry CLI
          command: |
            sudo apt-get update
            sudo apt-get install -y ca-certificates jq
            sudo touch /etc/apt/sources.list.d/cloudfoundry-cli.list
            echo "deb [trusted=yes] https://packages.cloudfoundry.org/debian stable main" | sudo tee -a /etc/apt/sources.list.d/cloudfoundry-cli.list
            sudo apt-get update
            sudo apt-get install dpkg
            sudo apt-get install cf7-cli
      - cloudfoundry/auth:
          endpoint: "https://api.fr.cloud.gov"
          org: gsa-tts-innovation-challenge
          space: eval-dev
      - run: cf push challenge-portal-eval-dev --strategy rolling

  staging-deploy:
    parallelism: 1
    docker:
      - image: cimg/node:20.14.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run: echo -e $STAGING_PRIVATE_KEY > staging_key.pem
      - run: echo -e $STAGING_PUBLIC_CERT > staging_cert.pem
      - run: echo 'export CF_PASSWORD=$CF_PASSWORD_STAGING' >> $BASH_ENV
      - run: echo 'export CF_USERNAME=$CF_USERNAME_STAGING' >> $BASH_ENV
      - run:
          name: Install Cloud Foundry CLI
          command: |
            sudo apt-get update
            sudo apt-get install -y ca-certificates jq
            sudo touch /etc/apt/sources.list.d/cloudfoundry-cli.list
            echo "deb [trusted=yes] https://packages.cloudfoundry.org/debian stable main" | sudo tee -a /etc/apt/sources.list.d/cloudfoundry-cli.list
            sudo apt-get update
            sudo apt-get install dpkg
            sudo apt-get install cf7-cli
      - cloudfoundry/auth:
          endpoint: "https://api.fr.cloud.gov"
          org: gsa-tts-innovation-challenge
          space: staging
      - run: cf push challenge-portal-stg --strategy rolling

  prod-deploy:
    parallelism: 1
    docker:
      - image: cimg/node:20.14.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run: echo -e $PRODUCTION_PRIVATE_KEY > production_key.pem
      - run: echo -e $PRODUCTION_PUBLIC_CERT > production_cert.pem
      - run: echo 'export CF_PASSWORD=$CF_PASSWORD_PRODUCTION' >> $BASH_ENV
      - run: echo 'export CF_USERNAME=$CF_USERNAME_PRODUCTION' >> $BASH_ENV
      - run:
          name: Install Cloud Foundry CLI
          command: |
            sudo apt-get update
            sudo apt-get install -y ca-certificates jq
            sudo touch /etc/apt/sources.list.d/cloudfoundry-cli.list
            echo "deb [trusted=yes] https://packages.cloudfoundry.org/debian stable main" | sudo tee -a /etc/apt/sources.list.d/cloudfoundry-cli.list
            sudo apt-get update
            sudo apt-get install dpkg
            sudo apt-get install cf7-cli
      - cloudfoundry/auth:
          endpoint: "https://api.fr.cloud.gov"
          org: gsa-tts-innovation-challenge
          space: prod
      - run: cf push challenge-portal-production --strategy rolling

workflows:
  test-and-deploy:
    jobs:
      - setup
      - lint:
          requires:
            - setup
      - test:
          requires:
            - setup
      - assets:
          requires:
            - setup
      - dev-deploy:
          requires:
            - lint
            - test
            - assets
          filters:
            branches:
              only: main
      - dev-eval-deploy:
          requires:
            - lint
            - test
            - assets
          filters:
            branches:
              only: eval-main
      - release-approval:
          type: approval
          requires:
            - assets
          filters:
            branches:
              only: staging
      - staging-deploy:
          requires:
            - release-approval
          filters:
            branches:
              only: staging
      - prod-release-approval:
          type: approval
          requires:
            - assets
          filters:
            branches:
              only: production
      - prod-deploy:
          requires:
            - prod-release-approval
          filters:
            branches:
              only: production

  nightly-dev:
    triggers:
      - schedule:
          cron: "0 4 * * *"
          filters:
            branches:
              only: main
    jobs:
      - setup
      - assets:
          requires:
            - setup
      - dev-deploy:
          requires:
            - assets
